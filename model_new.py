# generated by datamodel-codegen:
#   filename:  jsonschemaLeo.json
#   timestamp: 2023-10-02T21:05:18+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class QuestionWindowItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Past_Week: Optional[Dict[str, Any]] = Field(
        None, alias='Past Week', title='Past Week'
    )


class QuestionWindowItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Past_Month: Optional[Dict[str, Any]] = Field(
        None, alias='Past Month', title='Past Month'
    )


class QuestionWindowItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Now: Optional[Dict[str, Any]] = Field(None, title='Now')


class QuestionWindowItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Past_Three_Days: Optional[Dict[str, Any]] = Field(
        None, alias='Past Three Days', title='Past Three Days'
    )


class DeviceItem(BaseModel):
    class Config:
        extra = Extra.forbid

    iPhone: Optional[Dict[str, Any]] = Field(None, title='iPhone')


class DeviceItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Android: Optional[Dict[str, Any]] = Field(None, title='Android')


class CategoryItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Sleep: Optional[Dict[str, Any]] = Field(None, title='Sleep')


class CategoryItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Activity: Optional[Dict[str, Any]] = Field(None, title='Activity')


class CategoryItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Suicide: Optional[Dict[str, Any]] = Field(None, title='Suicide')


class CategoryItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Emotion: Optional[Dict[str, Any]] = Field(None, title='Emotion')


class CategoryItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Anhedonia: Optional[Dict[str, Any]] = Field(None, title='Anhedonia')


class CategoryItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Social: Optional[Dict[str, Any]] = Field(None, title='Social')


class EMA(BaseModel):
    class Config:
        extra = Extra.forbid

    Configuration_File: Optional[bool] = Field(
        True, alias='Configuration File', title='Configuration File'
    )
    Question_Window: Optional[
        Union[
            QuestionWindowItem,
            QuestionWindowItem1,
            QuestionWindowItem2,
            QuestionWindowItem3,
        ]
    ] = Field(None, alias='Question Window', title='Question Window')
    Device: Optional[Union[DeviceItem, DeviceItem1]] = Field(None, title='Device')
    Category: Optional[
        List[
            Union[
                CategoryItem,
                CategoryItem1,
                CategoryItem2,
                CategoryItem3,
                CategoryItem4,
                CategoryItem5,
            ]
        ]
    ] = Field(None, title='Category', unique_items=True)


class EcologicalMomentaryAssessment(BaseModel):
    EMA: Optional[EMA] = Field(None, title='EMA')


class StudySiteItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Helsinki_Alto: Optional[Dict[str, Any]] = Field(
        None, alias='Helsinki-Alto', title='Helsinki-Alto'
    )


class StudySiteItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Vanderbilt: Optional[Dict[str, Any]] = Field(None, title='Vanderbilt')


class StudySiteItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    VUMC: Optional[Dict[str, Any]] = Field(None, title='VUMC')


class StudySiteItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    UCLA: Optional[Dict[str, Any]] = Field(None, title='UCLA')


class StudySiteItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    McLean: Optional[Dict[str, Any]] = Field(None, title='McLean')


class StudySiteItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Cornell: Optional[Dict[str, Any]] = Field(None, title='Cornell')


class StudySiteItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    UCSD: Optional[Dict[str, Any]] = Field(None, title='UCSD')


class StudySiteItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    Stanford: Optional[Dict[str, Any]] = Field(None, title='Stanford')


class StudySiteItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    MSSM_Mayberg: Optional[Dict[str, Any]] = Field(
        None, alias='MSSM-Mayberg', title='MSSM-Mayberg'
    )


class StudySiteItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    MSSM_Murrough: Optional[Dict[str, Any]] = Field(
        None, alias='MSSM-Murrough', title='MSSM-Murrough'
    )


class StudySiteItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    Princeton: Optional[Dict[str, Any]] = Field(None, title='Princeton')


class StudySiteItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    Pittsburgh: Optional[Dict[str, Any]] = Field(None, title='Pittsburgh')


class Collection(BaseModel):
    class Config:
        extra = Extra.forbid

    Study_Name: Optional[str] = Field(None, alias='Study Name', title='Study Name')
    Collection_Site: Optional[str] = Field(
        None, alias='Collection Site', title='Collection Site'
    )
    Study_Site: Optional[
        Union[
            StudySiteItem,
            StudySiteItem1,
            StudySiteItem2,
            StudySiteItem3,
            StudySiteItem4,
            StudySiteItem5,
            StudySiteItem6,
            StudySiteItem7,
            StudySiteItem8,
            StudySiteItem9,
            StudySiteItem10,
            StudySiteItem11,
        ]
    ] = Field(None, alias='Study Site', title='Study Site')


class ModalityItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Digital_: Optional[Dict[str, Any]] = Field(None, alias='Digital ', title='Digital ')


class ModalityItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Psychometrics: Optional[Dict[str, Any]] = Field(None, title='Psychometrics')


class ModalityItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Synthetic_EEG: Optional[Dict[str, Any]] = Field(
        None, alias='Synthetic EEG', title='Synthetic EEG'
    )


class ModalityItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Neuropsychological_Assessments: Optional[Dict[str, Any]] = Field(
        None,
        alias='Neuropsychological Assessments',
        title='Neuropsychological Assessments',
    )


class ModalityItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Genetics: Optional[Dict[str, Any]] = Field(None, title='Genetics')


class ModalityItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    EMR_Clinical_Data: Optional[Dict[str, Any]] = Field(
        None, alias='EMR Clinical Data', title='EMR Clinical Data'
    )


class ModalityItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    Behavioral__Assessments: Optional[Dict[str, Any]] = Field(
        None, alias='Behavioral  Assessments', title='Behavioral  Assessments'
    )


class ModalityItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    Ecological_Momentary_Assessments: Optional[Dict[str, Any]] = Field(
        None,
        alias='Ecological Momentary Assessments',
        title='Ecological Momentary Assessments',
    )


class ModalityItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    Neurocognitive_Task_Performance: Optional[Dict[str, Any]] = Field(
        None,
        alias='Neurocognitive Task Performance',
        title='Neurocognitive Task Performance',
    )


class ModalityItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    Affect_Interview: Optional[Dict[str, Any]] = Field(
        None, alias='Affect Interview', title='Affect Interview'
    )


class ModalityItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    MRI: Optional[Dict[str, Any]] = Field(None, title='MRI')


class ModalityItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    EEG: Optional[Dict[str, Any]] = Field(None, title='EEG')


class ModalityItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    Liquid_Markers: Optional[Dict[str, Any]] = Field(
        None, alias='Liquid Markers', title='Liquid Markers'
    )


class CategoryOfData(BaseModel):
    class Config:
        extra = Extra.forbid

    Modality: Optional[
        Union[
            ModalityItem,
            ModalityItem1,
            ModalityItem2,
            ModalityItem3,
            ModalityItem4,
            ModalityItem5,
            ModalityItem6,
            ModalityItem7,
            ModalityItem8,
            ModalityItem9,
            ModalityItem10,
            ModalityItem11,
            ModalityItem12,
        ]
    ] = Field(None, title='Modality')


class InputDataCollection(BaseModel):
    Collection_: Optional[Collection] = Field(
        None, alias='Collection ', title='Collection '
    )
    Category_of_Data: Optional[CategoryOfData] = Field(
        None, alias='Category of Data', title='Category of Data'
    )


class NameItem(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_Tennessee_Knoxville: Optional[Dict[str, Any]] = Field(
        None,
        alias='University of Tennessee Knoxville',
        title='University of Tennessee Knoxville',
    )


class NameItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Stanford_University: Optional[Dict[str, Any]] = Field(
        None, alias='Stanford University', title='Stanford University'
    )


class NameItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_Pittsburgh: Optional[Dict[str, Any]] = Field(
        None, alias='University of Pittsburgh', title='University of Pittsburgh'
    )


class NameItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Harvard_Medical_School: Optional[Dict[str, Any]] = Field(
        None, alias='Harvard Medical School', title='Harvard Medical School'
    )


class NameItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Brigham_and_Women_s_Hospital: Optional[Dict[str, Any]] = Field(
        None, alias="Brigham and Women's Hospital", title="Brigham and Women's Hospital"
    )


class NameItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Weill_Cornell_Medicine: Optional[Dict[str, Any]] = Field(
        None, alias='Weill Cornell Medicine', title='Weill Cornell Medicine'
    )


class NameItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_Oxford: Optional[Dict[str, Any]] = Field(
        None, alias='University of Oxford', title='University of Oxford'
    )


class NameItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    Vanderbilt_University: Optional[Dict[str, Any]] = Field(
        None, alias='Vanderbilt University', title='Vanderbilt University'
    )


class NameItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    Vanderbilt_University_Medical_Center: Optional[Dict[str, Any]] = Field(
        None,
        alias='Vanderbilt University Medical Center',
        title='Vanderbilt University Medical Center',
    )


class NameItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    Mclean_Hospital: Optional[Dict[str, Any]] = Field(
        None, alias='Mclean Hospital', title='Mclean Hospital'
    )


class NameItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_California_Los_Angeles: Optional[Dict[str, Any]] = Field(
        None,
        alias='University of California Los Angeles',
        title='University of California Los Angeles',
    )


class NameItem11(BaseModel):
    class Config:
        extra = Extra.forbid

    Princeton_University: Optional[Dict[str, Any]] = Field(
        None, alias='Princeton University', title='Princeton University'
    )


class NameItem12(BaseModel):
    class Config:
        extra = Extra.forbid

    Alto_University: Optional[Dict[str, Any]] = Field(
        None, alias='Alto University', title='Alto University'
    )


class NameItem13(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_California_San_Diego: Optional[Dict[str, Any]] = Field(
        None,
        alias='University of California San Diego',
        title='University of California San Diego',
    )


class NameItem14(BaseModel):
    class Config:
        extra = Extra.forbid

    Icahn_School_of_Medicine_at_Mount_Senai: Optional[Dict[str, Any]] = Field(
        None,
        alias='Icahn School of Medicine at Mount Senai',
        title='Icahn School of Medicine at Mount Senai',
    )


class NameItem15(BaseModel):
    class Config:
        extra = Extra.forbid

    University_of_Helsinki: Optional[Dict[str, Any]] = Field(
        None, alias='University of Helsinki', title='University of Helsinki'
    )


class Institution(BaseModel):
    class Config:
        extra = Extra.forbid

    PI: Optional[str] = Field(None, title='PI')
    siteId: Optional[str] = Field(None, title='siteId')
    name: Optional[
        Union[
            NameItem,
            NameItem1,
            NameItem2,
            NameItem3,
            NameItem4,
            NameItem5,
            NameItem6,
            NameItem7,
            NameItem8,
            NameItem9,
            NameItem10,
            NameItem11,
            NameItem12,
            NameItem13,
            NameItem14,
            NameItem15,
        ]
    ] = Field(None, title='name')


class Site(BaseModel):
    institution: Optional[Institution] = Field(None, title='institution')


class CollectionPhaseItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Other: Optional[Dict[str, Any]] = Field(None, title='Other')


class CollectionPhaseItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Mid: Optional[Dict[str, Any]] = Field(None, title='Mid')


class CollectionPhaseItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Post: Optional[Dict[str, Any]] = Field(None, title='Post')


class CollectionPhaseItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Baseline: Optional[Dict[str, Any]] = Field(None, title='Baseline')


class CollectionEventItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Pre_Scan: Optional[Dict[str, Any]] = Field(None, alias='Pre-Scan', title='Pre-Scan')


class CollectionEventItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Admission: Optional[Dict[str, Any]] = Field(None, title='Admission')


class CollectionEventItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Baseline_self_report: Optional[Dict[str, Any]] = Field(
        None, alias='Baseline self-report', title='Baseline self-report'
    )


class CollectionEventItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Alternative_baseline: Optional[Dict[str, Any]] = Field(
        None, alias='Alternative baseline', title='Alternative baseline'
    )


class CollectionEventItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Discharge: Optional[Dict[str, Any]] = Field(None, title='Discharge')


class CollectionEventItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Follow_up: Optional[Dict[str, Any]] = Field(
        None, alias='Follow-up', title='Follow-up'
    )


class CollectionEventItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    Enrollment: Optional[Dict[str, Any]] = Field(None, title='Enrollment')


class CollectionEventItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    MRI_screening: Optional[Dict[str, Any]] = Field(
        None, alias='MRI screening', title='MRI screening'
    )


class CollectionEventItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    Scan: Optional[Dict[str, Any]] = Field(None, title='Scan')


class CollectionEventItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    Screening: Optional[Dict[str, Any]] = Field(None, title='Screening')


class CollectionEventItem10(BaseModel):
    class Config:
        extra = Extra.forbid

    Baseline: Optional[Dict[str, Any]] = Field(None, title='Baseline')


class CollectionDurationItem(BaseModel):
    class Config:
        extra = Extra.forbid

    field_1_180_day: Optional[Dict[str, Any]] = Field(
        None, alias='1-180 day', title='1-180 day'
    )


class CollectionDurationItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    less_than_1_day: Optional[Dict[str, Any]] = Field(
        None, alias='less than 1 day', title='less than 1 day'
    )


class Other(BaseModel):
    class Config:
        extra = Extra.forbid

    value: Optional[str] = Field(None, title='value')


class CollectionDurationItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Other: Optional[Other] = Field(None, title='Other')


class CollectionTime(BaseModel):
    class Config:
        extra = Extra.forbid

    Collection_Phase: Optional[
        Union[
            CollectionPhaseItem,
            CollectionPhaseItem1,
            CollectionPhaseItem2,
            CollectionPhaseItem3,
        ]
    ] = Field(None, alias='Collection Phase', title='Collection Phase')
    Collection_Event: Optional[
        Union[
            CollectionEventItem,
            CollectionEventItem1,
            CollectionEventItem2,
            CollectionEventItem3,
            CollectionEventItem4,
            CollectionEventItem5,
            CollectionEventItem6,
            CollectionEventItem7,
            CollectionEventItem8,
            CollectionEventItem9,
            CollectionEventItem10,
        ]
    ] = Field(None, alias='Collection Event', title='Collection Event')
    Start_Time: Optional[str] = Field(None, alias='Start Time', title='Start Time')
    End_Time: Optional[str] = Field(None, alias='End Time', title='End Time')
    Collection_Duration: Optional[
        Union[CollectionDurationItem, CollectionDurationItem1, CollectionDurationItem2]
    ] = Field(None, alias='Collection Duration', title='Collection Duration')


class CollectionTiming(BaseModel):
    CollectionTime: Optional[CollectionTime] = Field(None, title='CollectionTime')


class ParticipantStatu(BaseModel):
    class Config:
        extra = Extra.forbid

    Dropout: Optional[Dict[str, Any]] = Field(None, title='Dropout')


class ParticipantStatu1(BaseModel):
    class Config:
        extra = Extra.forbid

    Completer: Optional[Dict[str, Any]] = Field(None, title='Completer')


class ParticipantStatu2(BaseModel):
    class Config:
        extra = Extra.forbid

    Active: Optional[Dict[str, Any]] = Field(None, title='Active')


class Participant1(BaseModel):
    class Config:
        extra = Extra.forbid

    ParticipantID: Optional[str] = Field(None, title='ParticipantID')
    ParticipantStatus: Optional[
        Union[ParticipantStatu, ParticipantStatu1, ParticipantStatu2]
    ] = Field(None, title='ParticipantStatus')


class Clinical(BaseModel):
    class Config:
        extra = Extra.forbid

    Length_of_current_MDE: Optional[float] = Field(
        None, alias='Length of current MDE', title='Length of current MDE'
    )
    No__of_prior_MDEs: Optional[int] = Field(
        None, alias='No. of prior MDEs', title='No. of prior MDEs'
    )
    Baseline_QIDS_score: Optional[int] = Field(
        None, alias='Baseline QIDS score', title='Baseline QIDS score'
    )
    Age_at_MDD_onset: Optional[int] = Field(
        None, alias='Age at MDD onset', title='Age at MDD onset'
    )


class RiskFactors(BaseModel):
    class Config:
        extra = Extra.forbid

    Stressful_life_events: Optional[str] = Field(
        None, alias='Stressful life events', title='Stressful life events'
    )
    Parental_bonding: Optional[str] = Field(
        None, alias='Parental bonding', title='Parental bonding'
    )
    Personality: Optional[str] = Field(None, title='Personality')
    Social_life: Optional[str] = Field(None, alias='Social life', title='Social life')
    Childhood_sexual_abuse: Optional[str] = Field(
        None, alias='Childhood sexual abuse', title='Childhood sexual abuse'
    )
    Childhood_physical_abuse: Optional[str] = Field(
        None, alias='Childhood physical abuse', title='Childhood physical abuse'
    )
    Childhood_trauma: Optional[str] = Field(
        None, alias='Childhood trauma', title='Childhood trauma'
    )
    Positive_Family_History: Optional[str] = Field(
        None, alias='Positive Family History', title='Positive Family History'
    )


class PreviousTreatmentItem(BaseModel):
    class Config:
        extra = Extra.forbid

    UNKNOWN: Optional[Dict[str, Any]] = Field(None, title='UNKNOWN')


class PreviousTreatmentItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    YES: Optional[Dict[str, Any]] = Field(None, title='YES')


class PreviousTreatmentItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    NO: Optional[Dict[str, Any]] = Field(None, title='NO')


class TreatmentHistory(BaseModel):
    class Config:
        extra = Extra.forbid

    Previous_Treatment: Optional[
        Union[PreviousTreatmentItem, PreviousTreatmentItem1, PreviousTreatmentItem2]
    ] = Field(None, alias='Previous Treatment', title='Previous Treatment')
    Outcome: Optional[str] = Field(None, title='Outcome')


class TreatmentTypeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    DBS_: Optional[Dict[str, Any]] = Field(None, alias='DBS ', title='DBS ')


class TreatmentTypeItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Ketamin_Infusion: Optional[Dict[str, Any]] = Field(
        None, alias='Ketamin Infusion', title='Ketamin Infusion'
    )


class TreatmentTypeItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    SAINT_: Optional[Dict[str, Any]] = Field(None, alias='SAINT ', title='SAINT ')


class TreatmentTypeItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    CBT: Optional[Dict[str, Any]] = Field(None, title='CBT')


class TreatmentTypeItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    TMS_: Optional[Dict[str, Any]] = Field(None, alias='TMS ', title='TMS ')


class TreatmentTypeItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    rTMS: Optional[Dict[str, Any]] = Field(None, title='rTMS')


class TreatmentTypeItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    TBS_: Optional[Dict[str, Any]] = Field(None, alias='TBS ', title='TBS ')


class TreatmentTypeItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    iTBS: Optional[Dict[str, Any]] = Field(None, title='iTBS')


class TreatmentTypeItem8(BaseModel):
    class Config:
        extra = Extra.forbid

    Ultrasound_Pulsation: Optional[Dict[str, Any]] = Field(
        None, alias='Ultrasound Pulsation', title='Ultrasound Pulsation'
    )


class TreatmentTypeItem9(BaseModel):
    class Config:
        extra = Extra.forbid

    Pharmacological: Optional[Dict[str, Any]] = Field(None, title='Pharmacological')


class CurrentTreatment(BaseModel):
    class Config:
        extra = Extra.forbid

    Treatment_Type: Optional[
        List[
            Union[
                TreatmentTypeItem,
                TreatmentTypeItem1,
                TreatmentTypeItem2,
                TreatmentTypeItem3,
                TreatmentTypeItem4,
                TreatmentTypeItem5,
                TreatmentTypeItem6,
                TreatmentTypeItem7,
                TreatmentTypeItem8,
                TreatmentTypeItem9,
            ]
        ]
    ] = Field(None, alias='Treatment Type', title='Treatment Type', unique_items=True)


class Social(BaseModel):
    class Config:
        extra = Extra.forbid

    ZIP: Optional[str] = Field(None, title='ZIP')
    Adversity_Index: Optional[str] = Field(
        None, alias='Adversity Index', title='Adversity Index'
    )
    Years_of_education: Optional[int] = Field(
        None, alias='Years of education', title='Years of education'
    )
    Occupation: Optional[str] = Field(None, title='Occupation')
    Children: Optional[int] = Field(None, title='Children')
    Country: Optional[str] = Field(None, title='Country')
    State: Optional[str] = Field(None, title='State')


class RaceItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Other: Optional[Dict[str, Any]] = Field(None, title='Other')


class RaceItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Did_not_Answer_Unknown: Optional[Dict[str, Any]] = Field(
        None, alias='Did not Answer/Unknown', title='Did not Answer/Unknown'
    )


class RaceItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Non_Hispanic_White: Optional[Dict[str, Any]] = Field(
        None, alias='Non-Hispanic White', title='Non-Hispanic White'
    )


class RaceItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Non_Hispanic_Black: Optional[Dict[str, Any]] = Field(
        None, alias='Non-Hispanic Black', title='Non-Hispanic Black'
    )


class RaceItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Asian_Pacific_Islander: Optional[Dict[str, Any]] = Field(
        None, alias='Asian/Pacific-Islander', title='Asian/Pacific-Islander'
    )


class RaceItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Hispanic: Optional[Dict[str, Any]] = Field(None, title='Hispanic')


class SexualOrientationItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Something_else: Optional[Dict[str, Any]] = Field(
        None, alias='Something else', title='Something else'
    )


class SexualOrientationItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Did_not_Answer_Unknown: Optional[Dict[str, Any]] = Field(
        None, alias='Did not Answer/Unknown', title='Did not Answer/Unknown'
    )


class SexualOrientationItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Homosexual: Optional[Dict[str, Any]] = Field(None, title='Homosexual')


class SexualOrientationItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Heterosexual: Optional[Dict[str, Any]] = Field(None, title='Heterosexual')


class SexualOrientationItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Bisexual: Optional[Dict[str, Any]] = Field(None, title='Bisexual')


class SexualOrientationItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Choose_not_to_disclose: Optional[Dict[str, Any]] = Field(
        None, alias='Choose not to disclose', title='Choose not to disclose'
    )


class SexualOrientationItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    Do_not_know: Optional[Dict[str, Any]] = Field(
        None, alias='Do not know', title='Do not know'
    )


class MaritalStatu(BaseModel):
    class Config:
        extra = Extra.forbid

    Did_not_Answer_Unknown: Optional[Dict[str, Any]] = Field(
        None, alias='Did not Answer/Unknown', title='Did not Answer/Unknown'
    )


class MaritalStatu1(BaseModel):
    class Config:
        extra = Extra.forbid

    Married: Optional[Dict[str, Any]] = Field(None, title='Married')


class MaritalStatu2(BaseModel):
    class Config:
        extra = Extra.forbid

    Single: Optional[Dict[str, Any]] = Field(None, title='Single')


class SexAtBirthItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Female: Optional[Dict[str, Any]] = Field(None, title='Female')


class SexAtBirthItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Unkown: Optional[Dict[str, Any]] = Field(None, title='Unkown')


class SexAtBirthItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Male: Optional[Dict[str, Any]] = Field(None, title='Male')


class GenderItem(BaseModel):
    class Config:
        extra = Extra.forbid

    Female_to_Male: Optional[Dict[str, Any]] = Field(
        None, alias='Female-to-Male', title='Female-to-Male'
    )


class AdditionalCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    category: Optional[str] = Field(None, title='category')


class GenderItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    Additional_category: Optional[AdditionalCategory] = Field(
        None, alias='Additional category', title='Additional category'
    )


class GenderItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    Choose_not_to_disclose: Optional[Dict[str, Any]] = Field(
        None, alias='Choose not to disclose', title='Choose not to disclose'
    )


class GenderItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    Did_not_Answer_Unknown: Optional[Dict[str, Any]] = Field(
        None, alias='Did not Answer/Unknown', title='Did not Answer/Unknown'
    )


class GenderItem4(BaseModel):
    class Config:
        extra = Extra.forbid

    Male: Optional[Dict[str, Any]] = Field(None, title='Male')


class GenderItem5(BaseModel):
    class Config:
        extra = Extra.forbid

    Female: Optional[Dict[str, Any]] = Field(None, title='Female')


class GenderItem6(BaseModel):
    class Config:
        extra = Extra.forbid

    Male_to_Female: Optional[Dict[str, Any]] = Field(
        None, alias='Male-to-Female', title='Male-to-Female'
    )


class GenderItem7(BaseModel):
    class Config:
        extra = Extra.forbid

    Non_conforming: Optional[Dict[str, Any]] = Field(
        None, alias='Non-conforming', title='Non-conforming'
    )


class Demographics(BaseModel):
    class Config:
        extra = Extra.forbid

    Race: Optional[
        Union[RaceItem, RaceItem1, RaceItem2, RaceItem3, RaceItem4, RaceItem5]
    ] = Field(None, title='Race')
    Age: Optional[int] = Field(None, title='Age')
    Sexual_Orientation: Optional[
        Union[
            SexualOrientationItem,
            SexualOrientationItem1,
            SexualOrientationItem2,
            SexualOrientationItem3,
            SexualOrientationItem4,
            SexualOrientationItem5,
            SexualOrientationItem6,
        ]
    ] = Field(None, alias='Sexual Orientation', title='Sexual Orientation')
    Marital_Status: Optional[Union[MaritalStatu, MaritalStatu1, MaritalStatu2]] = Field(
        None, alias='Marital Status', title='Marital Status'
    )
    Family_Income: Optional[str] = Field(
        None, alias='Family Income', title='Family Income'
    )
    Sex_at_Birth: Optional[
        Union[SexAtBirthItem, SexAtBirthItem1, SexAtBirthItem2]
    ] = Field(None, alias='Sex at Birth', title='Sex at Birth')
    Gender: Optional[
        Union[
            GenderItem,
            GenderItem1,
            GenderItem2,
            GenderItem3,
            GenderItem4,
            GenderItem5,
            GenderItem6,
            GenderItem7,
        ]
    ] = Field(None, title='Gender')


class Handidnes(BaseModel):
    class Config:
        extra = Extra.forbid

    Left: Optional[Dict[str, Any]] = Field(None, title='Left')


class Handidnes1(BaseModel):
    class Config:
        extra = Extra.forbid

    Right: Optional[Dict[str, Any]] = Field(None, title='Right')


class Handidnes2(BaseModel):
    class Config:
        extra = Extra.forbid

    Ambidextrous: Optional[Dict[str, Any]] = Field(None, title='Ambidextrous')


class Physical(BaseModel):
    class Config:
        extra = Extra.forbid

    Handidness: Optional[Union[Handidnes, Handidnes1, Handidnes2]] = Field(
        None, title='Handidness'
    )
    Height_in_Inches: Optional[float] = Field(
        None, alias='Height in Inches', title='Height in Inches'
    )
    Weight_in_Pounds: Optional[float] = Field(
        None, alias='Weight in Pounds', title='Weight in Pounds'
    )


class Participant(BaseModel):
    Participant: Optional[Participant1] = Field(None, title='Participant')
    Clinical: Optional[Clinical] = Field(None, title='Clinical')
    Risk_factors_: Optional[RiskFactors] = Field(
        None, alias='Risk factors?', title='Risk factors?'
    )
    Treatment_History: Optional[TreatmentHistory] = Field(
        None, alias='Treatment History', title='Treatment History'
    )
    Current_Treatment: Optional[CurrentTreatment] = Field(
        None, alias='Current Treatment', title='Current Treatment'
    )
    Social: Optional[Social] = Field(None, title='Social')
    Demographics: Optional[Demographics] = Field(None, title='Demographics')
    Physical: Optional[Physical] = Field(None, title='Physical')


class MetadataForEmaContentSandboxV1(BaseModel):
    class Config:
        extra = Extra.forbid

    Ecological_Momentary_Assessment: Optional[EcologicalMomentaryAssessment] = Field(
        None, alias='Ecological Momentary Assessment'
    )
    Input_Data_Collection: Optional[InputDataCollection] = Field(
        None, alias='Input Data Collection'
    )
    Site: Optional[Site] = None
    Collection_Timing: Optional[CollectionTiming] = Field(
        None, alias='Collection Timing'
    )
    Participant: Optional[Participant] = None
